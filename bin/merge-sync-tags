#!/bin/bash

# Usage:
#   merge-sync-tags [files]
# fixes any merge-conflicts resulting from sync tags in the given files (or, by
# default, all conflicted files).  Automatically adds any files where all
# conflicts were resolved.  In theory, it should leave non-sync-tag changes
# untouched.

sedscript="$(tempfile -p merge-sync-tags- -s .sed)"
# \ in heredoc-opening means don't escape anything within the heredoc
cat >"$sedscript" <<\EOF
# call with sed -Esi -f
#
# when we see a conflict marker:
/^<{7}/ {
    : conflict
    # while we haven't yet seen an end-conflict marker,
    # append next line to pattern space
    />{7}/! {
        N
        b conflict
    }

    # now the pattern space has the entire conflict region.  Save it to the
    # hold buffer, for later use.
    h

    : resolve
    # while there's non-whitespace in the local or remote section:
    /<{7}[^\n]*[ \t\r\n]*(|\|{7}.*)={7}[^\n]*[ \t\r\n]*>{7}/! {
        # consider the first line of the local section.  if not a sync-tag,
        # or does not match the first line of the remote section, give up.
        # (regexp has unused groups to precisely match the one below)
        /(<{7}[^\n]*)\n([ \t\r\n]*#|\/\/) (sync-start:[^ ]*) ([0-9]*) ([^\n]*)\n(.*)(={7}[^\n]*\n)(\2 \3 [0-9]* \5)\n/! {
            x
            b
        }

        # otherwise, move the local version above the conflict marker,
        # and delete any copies of it.
        s/(<{7}[^\n]*)\n([ \t\r\n]*#|\/\/) (sync-start:[^ ]*) ([0-9]*) ([^\n]*)\n(.*)(={7}[^\n]*\n)(\2 \3 [0-9]* \5)\n/\2 \3 \4 \5\n\1\n\6\7/

        b resolve
    }

    # remove the now-handled conflict section.
    # (newline handling is awkward because the trailing newline
    # isn't in the pattern space)
    s/\n<{7}[^\n]*\n([ \t\r\n]*)[|=]{7}.*>{7}[^\n]*/\1/
}
EOF

# get ka-root (if we're in one)
KA_ROOT="$PWD"
while [ "$KA_ROOT" != "/" ] && ! [ -f "$KA_ROOT/.ka_root" ]; do
    KA_ROOT="$(cd -P "$(dirname "$KA_ROOT")" && pwd)"
done

files=("$@")
if [ "$#" -eq 0 ]; then
    # can't do git diff | read, because scoping problems;
    # and read doesn't play nice with <(git diff)
    filelist="$(tempfile -p merge-sync-tags- -s .txt)"
    git diff -z --name-only --diff-filter=U >"$filelist"
    read -a files -r -d '' <"$filelist"
fi

# TODO: use ancesdir instead, to avoid needing ka-root?
if [ "$KA_ROOT" != "/" ]; then
    # run sed script (over arguments, or unmerged files if unspecified)
    sed -Esi -f "$sedscript" "${files[@]}"

    # figure out how to fix up the sync tags
    lint="$("$KA_ROOT/tools/runlint.py" -l "$KA_ROOT/dev/linters/code_syncing_lint.py")"
    # actually fix them up
    echo -n "$lint" | sed -e 's/.*running: //' -e 's/ (dev.linters.*//' | sh

    for file in "${files[@]}"; do
    # check if that solved all our problems
        if echo -n "$lint" | grep -q "$file" | grep -q "appears to be malformed" || grep -q '[<>|=]{7}' "$file"; then
            echo "unable to resolve conflicts in $file :("
        else
            git add "$file"
        fi
    done
fi
